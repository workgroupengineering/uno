// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml.Hosting
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class XamlUIPresenter
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal XamlUIPresenter()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ThemeResourcesXaml
		{
			get
			{
				throw new global::System.NotImplementedException("The member string XamlUIPresenter.ThemeResourcesXaml is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20XamlUIPresenter.ThemeResourcesXaml");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "string XamlUIPresenter.ThemeResourcesXaml");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string ThemeKey
		{
			get
			{
				throw new global::System.NotImplementedException("The member string XamlUIPresenter.ThemeKey is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=string%20XamlUIPresenter.ThemeKey");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "string XamlUIPresenter.ThemeKey");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.UIElement RootElement
		{
			get
			{
				throw new global::System.NotImplementedException("The member UIElement XamlUIPresenter.RootElement is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=UIElement%20XamlUIPresenter.RootElement");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "UIElement XamlUIPresenter.RootElement");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool CompleteTimelinesAutomatically
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool XamlUIPresenter.CompleteTimelinesAutomatically is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20XamlUIPresenter.CompleteTimelinesAutomatically");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "bool XamlUIPresenter.CompleteTimelinesAutomatically");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.RootElement.get
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.RootElement.set
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeKey.get
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeKey.set
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeResourcesXaml.get
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.ThemeResourcesXaml.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetSize(int width, int height)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "void XamlUIPresenter.SetSize(int width, int height)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Render()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "void XamlUIPresenter.Render()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Present()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "void XamlUIPresenter.Present()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.Rect GetFlyoutPlacementTargetInfo(global::Windows.UI.Xaml.FrameworkElement placementTarget, global::Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode preferredPlacement, out global::Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode targetPreferredPlacement, out bool allowFallbacks)
		{
			throw new global::System.NotImplementedException("The member Rect XamlUIPresenter.GetFlyoutPlacementTargetInfo(FrameworkElement placementTarget, FlyoutPlacementMode preferredPlacement, out FlyoutPlacementMode targetPreferredPlacement, out bool allowFallbacks) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20XamlUIPresenter.GetFlyoutPlacementTargetInfo%28FrameworkElement%20placementTarget%2C%20FlyoutPlacementMode%20preferredPlacement%2C%20out%20FlyoutPlacementMode%20targetPreferredPlacement%2C%20out%20bool%20allowFallbacks%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.Foundation.Rect GetFlyoutPlacement(global::Windows.Foundation.Rect placementTargetBounds, global::Windows.Foundation.Size controlSize, global::Windows.Foundation.Size minControlSize, global::Windows.Foundation.Rect containerRect, global::Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, out global::Windows.UI.Xaml.Controls.Primitives.FlyoutPlacementMode chosenPlacement)
		{
			throw new global::System.NotImplementedException("The member Rect XamlUIPresenter.GetFlyoutPlacement(Rect placementTargetBounds, Size controlSize, Size minControlSize, Rect containerRect, FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, out FlyoutPlacementMode chosenPlacement) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=Rect%20XamlUIPresenter.GetFlyoutPlacement%28Rect%20placementTargetBounds%2C%20Size%20controlSize%2C%20Size%20minControlSize%2C%20Rect%20containerRect%2C%20FlyoutPlacementMode%20targetPreferredPlacement%2C%20bool%20allowFallbacks%2C%20out%20FlyoutPlacementMode%20chosenPlacement%29");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.CompleteTimelinesAutomatically.get
		// Forced skipping of method Windows.UI.Xaml.Hosting.XamlUIPresenter.CompleteTimelinesAutomatically.set
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetHost(global::Windows.UI.Xaml.Hosting.IXamlUIPresenterHost host)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "void XamlUIPresenter.SetHost(IXamlUIPresenterHost host)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void NotifyWindowSizeChanged()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Hosting.XamlUIPresenter", "void XamlUIPresenter.NotifyWindowSizeChanged()");
		}
#endif
	}
}
