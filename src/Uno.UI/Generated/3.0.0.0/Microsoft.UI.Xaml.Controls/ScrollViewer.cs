// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml.Controls
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class ScrollViewer : global::Microsoft.UI.Xaml.Controls.ContentControl, global::Microsoft.UI.Xaml.Controls.IScrollAnchorProvider
	{
		// Skipping already declared property CurrentAnchor
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHorizontalScrollChainingEnabled
		{
			get
			{
				return (bool)this.GetValue(IsHorizontalScrollChainingEnabledProperty);
			}
			set
			{
				this.SetValue(IsHorizontalScrollChainingEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsHorizontalRailEnabled
		{
			get
			{
				return (bool)this.GetValue(IsHorizontalRailEnabledProperty);
			}
			set
			{
				this.SetValue(IsHorizontalRailEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsDeferredScrollingEnabled
		{
			get
			{
				return (bool)this.GetValue(IsDeferredScrollingEnabledProperty);
			}
			set
			{
				this.SetValue(IsDeferredScrollingEnabledProperty, value);
			}
		}
#endif
		// Skipping already declared property HorizontalSnapPointsType
		// Skipping already declared property HorizontalSnapPointsAlignment
		// Skipping already declared property HorizontalScrollMode
		// Skipping already declared property HorizontalScrollBarVisibility
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsZoomInertiaEnabled
		{
			get
			{
				return (bool)this.GetValue(IsZoomInertiaEnabledProperty);
			}
			set
			{
				this.SetValue(IsZoomInertiaEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double HorizontalAnchorRatio
		{
			get
			{
				return (double)this.GetValue(HorizontalAnchorRatioProperty);
			}
			set
			{
				this.SetValue(HorizontalAnchorRatioProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsZoomChainingEnabled
		{
			get
			{
				return (bool)this.GetValue(IsZoomChainingEnabledProperty);
			}
			set
			{
				this.SetValue(IsZoomChainingEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsVerticalScrollChainingEnabled
		{
			get
			{
				return (bool)this.GetValue(IsVerticalScrollChainingEnabledProperty);
			}
			set
			{
				this.SetValue(IsVerticalScrollChainingEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsVerticalRailEnabled
		{
			get
			{
				return (bool)this.GetValue(IsVerticalRailEnabledProperty);
			}
			set
			{
				this.SetValue(IsVerticalRailEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsScrollInertiaEnabled
		{
			get
			{
				return (bool)this.GetValue(IsScrollInertiaEnabledProperty);
			}
			set
			{
				this.SetValue(IsScrollInertiaEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanContentRenderOutsideBounds
		{
			get
			{
				return (bool)this.GetValue(CanContentRenderOutsideBoundsProperty);
			}
			set
			{
				this.SetValue(CanContentRenderOutsideBoundsProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.UIElement LeftHeader
		{
			get
			{
				return (global::Microsoft.UI.Xaml.UIElement)this.GetValue(LeftHeaderProperty);
			}
			set
			{
				this.SetValue(LeftHeaderProperty, value);
			}
		}
#endif
		// Skipping already declared property BringIntoViewOnFocusChange
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Controls.SnapPointsType ZoomSnapPointsType
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Controls.SnapPointsType)this.GetValue(ZoomSnapPointsTypeProperty);
			}
			set
			{
				this.SetValue(ZoomSnapPointsTypeProperty, value);
			}
		}
#endif
		// Skipping already declared property ZoomMode
		// Skipping already declared property VerticalSnapPointsType
		// Skipping already declared property VerticalSnapPointsAlignment
		// Skipping already declared property VerticalScrollMode
		// Skipping already declared property VerticalScrollBarVisibility
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double VerticalAnchorRatio
		{
			get
			{
				return (double)this.GetValue(VerticalAnchorRatioProperty);
			}
			set
			{
				this.SetValue(VerticalAnchorRatioProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.UIElement TopLeftHeader
		{
			get
			{
				return (global::Microsoft.UI.Xaml.UIElement)this.GetValue(TopLeftHeaderProperty);
			}
			set
			{
				this.SetValue(TopLeftHeaderProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.UIElement TopHeader
		{
			get
			{
				return (global::Microsoft.UI.Xaml.UIElement)this.GetValue(TopHeaderProperty);
			}
			set
			{
				this.SetValue(TopHeaderProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ReduceViewportForCoreInputViewOcclusions
		{
			get
			{
				return (bool)this.GetValue(ReduceViewportForCoreInputViewOcclusionsProperty);
			}
			set
			{
				this.SetValue(ReduceViewportForCoreInputViewOcclusionsProperty, value);
			}
		}
#endif
		// Skipping already declared property MinZoomFactor
		// Skipping already declared property MaxZoomFactor
		// Skipping already declared property ComputedHorizontalScrollBarVisibility
		// Skipping already declared property ComputedVerticalScrollBarVisibility
		// Skipping already declared property ExtentHeight
		// Skipping already declared property ExtentWidth
		// Skipping already declared property HorizontalOffset
		// Skipping already declared property ScrollableHeight
		// Skipping already declared property ScrollableWidth
		// Skipping already declared property VerticalOffset
		// Skipping already declared property ViewportHeight
		// Skipping already declared property ViewportWidth
		// Skipping already declared property ZoomFactor
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<float> ZoomSnapPoints
		{
			get
			{
				return (global::System.Collections.Generic.IList<float>)this.GetValue(ZoomSnapPointsProperty);
			}
		}
#endif
		// Skipping already declared property BringIntoViewOnFocusChangeProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty CanContentRenderOutsideBoundsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"CanContentRenderOutsideBounds", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
		// Skipping already declared property ComputedHorizontalScrollBarVisibilityProperty
		// Skipping already declared property ComputedVerticalScrollBarVisibilityProperty
		// Skipping already declared property ExtentHeightProperty
		// Skipping already declared property ExtentWidthProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(HorizontalAnchorRatio), typeof(double),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
		// Skipping already declared property HorizontalOffsetProperty
		// Skipping already declared property HorizontalScrollBarVisibilityProperty
		// Skipping already declared property HorizontalScrollModeProperty
		// Skipping already declared property HorizontalSnapPointsAlignmentProperty
		// Skipping already declared property HorizontalSnapPointsTypeProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsDeferredScrollingEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsDeferredScrollingEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsHorizontalRailEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsHorizontalRailEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsHorizontalScrollChainingEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsHorizontalScrollChainingEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsScrollInertiaEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsScrollInertiaEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsVerticalRailEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsVerticalRailEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsVerticalScrollChainingEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsVerticalScrollChainingEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsZoomChainingEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsZoomChainingEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsZoomInertiaEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.RegisterAttached(
			"IsZoomInertiaEnabled", typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty LeftHeaderProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(LeftHeader), typeof(global::Microsoft.UI.Xaml.UIElement),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.UIElement)));
#endif
		// Skipping already declared property MaxZoomFactorProperty
		// Skipping already declared property MinZoomFactorProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ReduceViewportForCoreInputViewOcclusionsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(ReduceViewportForCoreInputViewOcclusions), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
		// Skipping already declared property ScrollableHeightProperty
		// Skipping already declared property ScrollableWidthProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TopHeaderProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TopHeader), typeof(global::Microsoft.UI.Xaml.UIElement),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.UIElement)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TopLeftHeaderProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TopLeftHeader), typeof(global::Microsoft.UI.Xaml.UIElement),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.UIElement)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(VerticalAnchorRatio), typeof(double),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
		// Skipping already declared property VerticalOffsetProperty
		// Skipping already declared property VerticalScrollBarVisibilityProperty
		// Skipping already declared property VerticalScrollModeProperty
		// Skipping already declared property VerticalSnapPointsAlignmentProperty
		// Skipping already declared property VerticalSnapPointsTypeProperty
		// Skipping already declared property ViewportHeightProperty
		// Skipping already declared property ViewportWidthProperty
		// Skipping already declared property ZoomFactorProperty
		// Skipping already declared property ZoomModeProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ZoomSnapPointsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(ZoomSnapPoints), typeof(global::System.Collections.Generic.IList<float>),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::System.Collections.Generic.IList<float>)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ZoomSnapPointsTypeProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(ZoomSnapPointsType), typeof(global::Microsoft.UI.Xaml.Controls.SnapPointsType),
			typeof(global::Microsoft.UI.Xaml.Controls.ScrollViewer),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Controls.SnapPointsType)));
#endif
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollViewer()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollViewer()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibility.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollBarVisibility.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalRailEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalRailEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalRailEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomChainingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomChainingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsScrollInertiaEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomInertiaEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollMode.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollMode.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollMode.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollMode.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomMode.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomMode.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignment.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignment.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignment.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignment.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsType.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsType.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsType.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsType.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomSnapPointsType.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomSnapPointsType.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalOffset.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewportWidth.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollableWidth.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibility.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ExtentWidth.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalOffset.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewportHeight.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollableHeight.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ComputedVerticalScrollBarVisibility.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ExtentHeight.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MinZoomFactor.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MinZoomFactor.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MaxZoomFactor.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MaxZoomFactor.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomFactor.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomSnapPoints.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopLeftHeader.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopLeftHeader.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.LeftHeader.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.LeftHeader.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopHeader.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopHeader.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusions.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusions.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalAnchorRatio.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalAnchorRatio.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalAnchorRatio.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalAnchorRatio.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.CanContentRenderOutsideBounds.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.AnchorRequested.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.AnchorRequested.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewChanging.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewChanging.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewChanged.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewChanged.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.DirectManipulationStarted.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.DirectManipulationStarted.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.DirectManipulationCompleted.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.DirectManipulationCompleted.remove
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollToHorizontalOffset(double)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollToVerticalOffset(double)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ZoomToFactor(float factor)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "void ScrollViewer.ZoomToFactor(float factor)");
		}
#endif
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.ChangeView(double?, double?, float?)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.ChangeView(double?, double?, float?, bool)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void InvalidateScrollInfo()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "void ScrollViewer.InvalidateScrollInfo()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChange.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.CurrentAnchor.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RegisterAnchorCandidate(global::Microsoft.UI.Xaml.UIElement element)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "void ScrollViewer.RegisterAnchorCandidate(UIElement element)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void UnregisterAnchorCandidate(global::Microsoft.UI.Xaml.UIElement element)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "void ScrollViewer.UnregisterAnchorCandidate(UIElement element)");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsAlignmentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsAlignmentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalSnapPointsTypeProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalSnapPointsTypeProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomSnapPointsTypeProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalOffsetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewportWidthProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollableWidthProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ExtentWidthProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalOffsetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ViewportHeightProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ScrollableHeightProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ExtentHeightProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MinZoomFactorProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.MaxZoomFactorProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomFactorProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomSnapPointsProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopLeftHeaderProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.LeftHeaderProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.TopHeaderProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ReduceViewportForCoreInputViewOcclusionsProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalAnchorRatioProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalAnchorRatioProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.Controls.ScrollBarVisibility)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetVerticalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetVerticalScrollBarVisibility(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.Controls.ScrollBarVisibility)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalRailEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsHorizontalRailEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsHorizontalRailEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsHorizontalRailEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isHorizontalRailEnabled)
		{
			element.SetValue(IsHorizontalRailEnabledProperty, isHorizontalRailEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalRailEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsVerticalRailEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsVerticalRailEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsVerticalRailEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isVerticalRailEnabled)
		{
			element.SetValue(IsVerticalRailEnabledProperty, isVerticalRailEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsHorizontalScrollChainingEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsHorizontalScrollChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsHorizontalScrollChainingEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsHorizontalScrollChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isHorizontalScrollChainingEnabled)
		{
			element.SetValue(IsHorizontalScrollChainingEnabledProperty, isHorizontalScrollChainingEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsVerticalScrollChainingEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsVerticalScrollChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsVerticalScrollChainingEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsVerticalScrollChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isVerticalScrollChainingEnabled)
		{
			element.SetValue(IsVerticalScrollChainingEnabledProperty, isVerticalScrollChainingEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomChainingEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsZoomChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsZoomChainingEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsZoomChainingEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isZoomChainingEnabled)
		{
			element.SetValue(IsZoomChainingEnabledProperty, isZoomChainingEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsScrollInertiaEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsScrollInertiaEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsScrollInertiaEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsScrollInertiaEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isScrollInertiaEnabled)
		{
			element.SetValue(IsScrollInertiaEnabledProperty, isScrollInertiaEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsZoomInertiaEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsZoomInertiaEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsZoomInertiaEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsZoomInertiaEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isZoomInertiaEnabled)
		{
			element.SetValue(IsZoomInertiaEnabledProperty, isZoomInertiaEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.HorizontalScrollModeProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetHorizontalScrollMode(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetHorizontalScrollMode(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.Controls.ScrollMode)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.VerticalScrollModeProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetVerticalScrollMode(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetVerticalScrollMode(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.Controls.ScrollMode)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.ZoomModeProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetZoomMode(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetZoomMode(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.Controls.ZoomMode)
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.CanContentRenderOutsideBoundsProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetCanContentRenderOutsideBounds(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(CanContentRenderOutsideBoundsProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetCanContentRenderOutsideBounds(global::Microsoft.UI.Xaml.DependencyObject element, bool canContentRenderOutsideBounds)
		{
			element.SetValue(CanContentRenderOutsideBoundsProperty, canContentRenderOutsideBounds);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static bool GetIsDeferredScrollingEnabled(global::Microsoft.UI.Xaml.DependencyObject element)
		{
			return (bool)element.GetValue(IsDeferredScrollingEnabledProperty);
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static void SetIsDeferredScrollingEnabled(global::Microsoft.UI.Xaml.DependencyObject element, bool isDeferredScrollingEnabled)
		{
			element.SetValue(IsDeferredScrollingEnabledProperty, isDeferredScrollingEnabled);
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.ScrollViewer.BringIntoViewOnFocusChangeProperty.get
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.GetBringIntoViewOnFocusChange(Microsoft.UI.Xaml.DependencyObject)
		// Skipping already declared method Microsoft.UI.Xaml.Controls.ScrollViewer.SetBringIntoViewOnFocusChange(Microsoft.UI.Xaml.DependencyObject, bool)
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.ScrollViewer, global::Microsoft.UI.Xaml.Controls.AnchorRequestedEventArgs> AnchorRequested
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event TypedEventHandler<ScrollViewer, AnchorRequestedEventArgs> ScrollViewer.AnchorRequested");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event TypedEventHandler<ScrollViewer, AnchorRequestedEventArgs> ScrollViewer.AnchorRequested");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::System.EventHandler<object> DirectManipulationCompleted
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<object> ScrollViewer.DirectManipulationCompleted");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<object> ScrollViewer.DirectManipulationCompleted");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::System.EventHandler<object> DirectManipulationStarted
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<object> ScrollViewer.DirectManipulationStarted");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<object> ScrollViewer.DirectManipulationStarted");
			}
		}
#endif
		// Skipping already declared event Microsoft.UI.Xaml.Controls.ScrollViewer.ViewChanged
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::System.EventHandler<global::Microsoft.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs> ViewChanging
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<ScrollViewerViewChangingEventArgs> ScrollViewer.ViewChanging");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.ScrollViewer", "event EventHandler<ScrollViewerViewChangingEventArgs> ScrollViewer.ViewChanging");
			}
		}
#endif
		// Processing: Microsoft.UI.Xaml.Controls.IScrollAnchorProvider
	}
}
