// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml.Controls
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class RichTextBlock : global::Microsoft.UI.Xaml.FrameworkElement
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextAlignment HorizontalTextAlignment
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextAlignment)this.GetValue(HorizontalTextAlignmentProperty);
			}
			set
			{
				this.SetValue(HorizontalTextAlignmentProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double LineHeight
		{
			get
			{
				return (double)this.GetValue(LineHeightProperty);
			}
			set
			{
				this.SetValue(LineHeightProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.Brush Foreground
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.Brush)this.GetValue(ForegroundProperty);
			}
			set
			{
				this.SetValue(ForegroundProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.FontWeight FontWeight
		{
			get
			{
				return (global::Windows.UI.Text.FontWeight)this.GetValue(FontWeightProperty);
			}
			set
			{
				this.SetValue(FontWeightProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.FontStyle FontStyle
		{
			get
			{
				return (global::Windows.UI.Text.FontStyle)this.GetValue(FontStyleProperty);
			}
			set
			{
				this.SetValue(FontStyleProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.FontStretch FontStretch
		{
			get
			{
				return (global::Windows.UI.Text.FontStretch)this.GetValue(FontStretchProperty);
			}
			set
			{
				this.SetValue(FontStretchProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double FontSize
		{
			get
			{
				return (double)this.GetValue(FontSizeProperty);
			}
			set
			{
				this.SetValue(FontSizeProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.FontFamily FontFamily
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.FontFamily)this.GetValue(FontFamilyProperty);
			}
			set
			{
				this.SetValue(FontFamilyProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTextSelectionEnabled
		{
			get
			{
				return (bool)this.GetValue(IsTextSelectionEnabledProperty);
			}
			set
			{
				this.SetValue(IsTextSelectionEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTextScaleFactorEnabled
		{
			get
			{
				return (bool)this.GetValue(IsTextScaleFactorEnabledProperty);
			}
			set
			{
				this.SetValue(IsTextScaleFactorEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int CharacterSpacing
		{
			get
			{
				return (int)this.GetValue(CharacterSpacingProperty);
			}
			set
			{
				this.SetValue(CharacterSpacingProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsColorFontEnabled
		{
			get
			{
				return (bool)this.GetValue(IsColorFontEnabledProperty);
			}
			set
			{
				this.SetValue(IsColorFontEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextWrapping TextWrapping
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextWrapping)this.GetValue(TextWrappingProperty);
			}
			set
			{
				this.SetValue(TextWrappingProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.LineStackingStrategy LineStackingStrategy
		{
			get
			{
				return (global::Microsoft.UI.Xaml.LineStackingStrategy)this.GetValue(LineStackingStrategyProperty);
			}
			set
			{
				this.SetValue(LineStackingStrategyProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextTrimming TextTrimming
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextTrimming)this.GetValue(TextTrimmingProperty);
			}
			set
			{
				this.SetValue(TextTrimmingProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextReadingOrder TextReadingOrder
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextReadingOrder)this.GetValue(TextReadingOrderProperty);
			}
			set
			{
				this.SetValue(TextReadingOrderProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextLineBounds TextLineBounds
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextLineBounds)this.GetValue(TextLineBoundsProperty);
			}
			set
			{
				this.SetValue(TextLineBoundsProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double TextIndent
		{
			get
			{
				return (double)this.GetValue(TextIndentProperty);
			}
			set
			{
				this.SetValue(TextIndentProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Text.TextDecorations TextDecorations
		{
			get
			{
				return (global::Windows.UI.Text.TextDecorations)this.GetValue(TextDecorationsProperty);
			}
			set
			{
				this.SetValue(TextDecorationsProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.TextAlignment TextAlignment
		{
			get
			{
				return (global::Microsoft.UI.Xaml.TextAlignment)this.GetValue(TextAlignmentProperty);
			}
			set
			{
				this.SetValue(TextAlignmentProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.SolidColorBrush SelectionHighlightColor
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.SolidColorBrush)this.GetValue(SelectionHighlightColorProperty);
			}
			set
			{
				this.SetValue(SelectionHighlightColorProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase SelectionFlyout
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)this.GetValue(SelectionFlyoutProperty);
			}
			set
			{
				this.SetValue(SelectionFlyoutProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Thickness Padding
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Thickness)this.GetValue(PaddingProperty);
			}
			set
			{
				this.SetValue(PaddingProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Controls.RichTextBlockOverflow OverflowContentTarget
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Controls.RichTextBlockOverflow)this.GetValue(OverflowContentTargetProperty);
			}
			set
			{
				this.SetValue(OverflowContentTargetProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.OpticalMarginAlignment OpticalMarginAlignment
		{
			get
			{
				return (global::Microsoft.UI.Xaml.OpticalMarginAlignment)this.GetValue(OpticalMarginAlignmentProperty);
			}
			set
			{
				this.SetValue(OpticalMarginAlignmentProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int MaxLines
		{
			get
			{
				return (int)this.GetValue(MaxLinesProperty);
			}
			set
			{
				this.SetValue(MaxLinesProperty, value);
			}
		}
#endif
		// Skipping already declared property Blocks
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Documents.TextPointer ContentEnd
		{
			get
			{
				throw new global::System.NotImplementedException("The member TextPointer RichTextBlock.ContentEnd is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TextPointer%20RichTextBlock.ContentEnd");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Documents.TextPointer ContentStart
		{
			get
			{
				throw new global::System.NotImplementedException("The member TextPointer RichTextBlock.ContentStart is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TextPointer%20RichTextBlock.ContentStart");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasOverflowContent
		{
			get
			{
				return (bool)this.GetValue(HasOverflowContentProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsTextTrimmed
		{
			get
			{
				return (bool)this.GetValue(IsTextTrimmedProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public string SelectedText
		{
			get
			{
				return (string)this.GetValue(SelectedTextProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Documents.TextPointer SelectionEnd
		{
			get
			{
				throw new global::System.NotImplementedException("The member TextPointer RichTextBlock.SelectionEnd is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TextPointer%20RichTextBlock.SelectionEnd");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Documents.TextPointer SelectionStart
		{
			get
			{
				throw new global::System.NotImplementedException("The member TextPointer RichTextBlock.SelectionStart is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TextPointer%20RichTextBlock.SelectionStart");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Documents.TextHighlighter> TextHighlighters
		{
			get
			{
				throw new global::System.NotImplementedException("The member IList<TextHighlighter> RichTextBlock.TextHighlighters is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IList%3CTextHighlighter%3E%20RichTextBlock.TextHighlighters");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double BaselineOffset
		{
			get
			{
				throw new global::System.NotImplementedException("The member double RichTextBlock.BaselineOffset is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20RichTextBlock.BaselineOffset");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty CharacterSpacingProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(CharacterSpacing), typeof(int),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(int)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty FontFamilyProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(FontFamily), typeof(global::Microsoft.UI.Xaml.Media.FontFamily),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.FontFamily)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty FontSizeProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(FontSize), typeof(double),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty FontStretchProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(FontStretch), typeof(global::Windows.UI.Text.FontStretch),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Text.FontStretch)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty FontStyleProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(FontStyle), typeof(global::Windows.UI.Text.FontStyle),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Text.FontStyle)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty FontWeightProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(FontWeight), typeof(global::Windows.UI.Text.FontWeight),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Text.FontWeight)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ForegroundProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(Foreground), typeof(global::Microsoft.UI.Xaml.Media.Brush),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.Brush)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty HasOverflowContentProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(HasOverflowContent), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty HorizontalTextAlignmentProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(HorizontalTextAlignment), typeof(global::Microsoft.UI.Xaml.TextAlignment),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextAlignment)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsColorFontEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(IsColorFontEnabled), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsTextScaleFactorEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(IsTextScaleFactorEnabled), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsTextSelectionEnabledProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(IsTextSelectionEnabled), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty IsTextTrimmedProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(IsTextTrimmed), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty LineHeightProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(LineHeight), typeof(double),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty LineStackingStrategyProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(LineStackingStrategy), typeof(global::Microsoft.UI.Xaml.LineStackingStrategy),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.LineStackingStrategy)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty MaxLinesProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(MaxLines), typeof(int),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(int)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty OpticalMarginAlignmentProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(OpticalMarginAlignment), typeof(global::Microsoft.UI.Xaml.OpticalMarginAlignment),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.OpticalMarginAlignment)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty OverflowContentTargetProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(OverflowContentTarget), typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlockOverflow),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Controls.RichTextBlockOverflow)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty PaddingProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(Padding), typeof(global::Microsoft.UI.Xaml.Thickness),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Thickness)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty SelectedTextProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(SelectedText), typeof(string),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(string)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty SelectionFlyoutProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(SelectionFlyout), typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty SelectionHighlightColorProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(SelectionHighlightColor), typeof(global::Microsoft.UI.Xaml.Media.SolidColorBrush),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.SolidColorBrush)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextAlignmentProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextAlignment), typeof(global::Microsoft.UI.Xaml.TextAlignment),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextAlignment)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextDecorationsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextDecorations), typeof(global::Windows.UI.Text.TextDecorations),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Text.TextDecorations)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextIndentProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextIndent), typeof(double),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextLineBoundsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextLineBounds), typeof(global::Microsoft.UI.Xaml.TextLineBounds),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextLineBounds)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextReadingOrderProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextReadingOrder), typeof(global::Microsoft.UI.Xaml.TextReadingOrder),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextReadingOrder)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextTrimmingProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextTrimming), typeof(global::Microsoft.UI.Xaml.TextTrimming),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextTrimming)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty TextWrappingProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(TextWrapping), typeof(global::Microsoft.UI.Xaml.TextWrapping),
			typeof(global::Microsoft.UI.Xaml.Controls.RichTextBlock),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.TextWrapping)));
#endif
		// Skipping already declared method Microsoft.UI.Xaml.Controls.RichTextBlock.RichTextBlock()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.RichTextBlock()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontSize.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontSize.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontFamily.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontFamily.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontWeight.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontWeight.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStyle.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStyle.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStretch.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStretch.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.Foreground.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.Foreground.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextWrapping.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextWrapping.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextTrimming.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextTrimming.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextAlignment.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextAlignment.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.Blocks.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.Padding.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.Padding.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineHeight.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineHeight.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineStackingStrategy.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineStackingStrategy.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.CharacterSpacing.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.CharacterSpacing.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OverflowContentTarget.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OverflowContentTarget.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextSelectionEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextSelectionEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.HasOverflowContent.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectedText.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.ContentStart.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.ContentEnd.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionStart.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionEnd.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.BaselineOffset.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.MaxLines.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.MaxLines.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextLineBounds.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextLineBounds.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionHighlightColor.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionHighlightColor.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OpticalMarginAlignment.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OpticalMarginAlignment.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsColorFontEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsColorFontEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextReadingOrder.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextReadingOrder.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextDecorations.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextDecorations.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextTrimmed.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.HorizontalTextAlignment.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.HorizontalTextAlignment.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextHighlighters.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionFlyout.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionFlyout.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionChanged.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionChanged.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.ContextMenuOpening.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.ContextMenuOpening.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextTrimmedChanged.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextTrimmedChanged.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SelectAll()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "void RichTextBlock.SelectAll()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Select(global::Microsoft.UI.Xaml.Documents.TextPointer start, global::Microsoft.UI.Xaml.Documents.TextPointer end)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "void RichTextBlock.Select(TextPointer start, TextPointer end)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Documents.TextPointer GetPositionFromPoint(global::Windows.Foundation.Point point)
		{
			throw new global::System.NotImplementedException("The member TextPointer RichTextBlock.GetPositionFromPoint(Point point) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=TextPointer%20RichTextBlock.GetPositionFromPoint%28Point%20point%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void CopySelectionToClipboard()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "void RichTextBlock.CopySelectionToClipboard()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextIndent.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextIndent.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontSizeProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontFamilyProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontWeightProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStyleProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.FontStretchProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.ForegroundProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextWrappingProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextTrimmingProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextAlignmentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.PaddingProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineHeightProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.LineStackingStrategyProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.CharacterSpacingProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OverflowContentTargetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextSelectionEnabledProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.HasOverflowContentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectedTextProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.MaxLinesProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextLineBoundsProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionHighlightColorProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.OpticalMarginAlignmentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsColorFontEnabledProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextReadingOrderProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextScaleFactorEnabledProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextDecorationsProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.IsTextTrimmedProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.HorizontalTextAlignmentProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.SelectionFlyoutProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.RichTextBlock.TextIndentProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler ContextMenuOpening
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event ContextMenuOpeningEventHandler RichTextBlock.ContextMenuOpening");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event ContextMenuOpeningEventHandler RichTextBlock.ContextMenuOpening");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Microsoft.UI.Xaml.Controls.RichTextBlock, global::Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs> IsTextTrimmedChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event TypedEventHandler<RichTextBlock, IsTextTrimmedChangedEventArgs> RichTextBlock.IsTextTrimmedChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event TypedEventHandler<RichTextBlock, IsTextTrimmedChangedEventArgs> RichTextBlock.IsTextTrimmedChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Microsoft.UI.Xaml.RoutedEventHandler SelectionChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event RoutedEventHandler RichTextBlock.SelectionChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Xaml.Controls.RichTextBlock", "event RoutedEventHandler RichTextBlock.SelectionChanged");
			}
		}
#endif
	}
}
