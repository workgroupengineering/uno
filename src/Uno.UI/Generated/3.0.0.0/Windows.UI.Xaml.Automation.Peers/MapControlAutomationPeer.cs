// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml.Automation.Peers
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class MapControlAutomationPeer : global::Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer, global::Windows.UI.Xaml.Automation.Provider.IScrollProvider, global::Windows.UI.Xaml.Automation.Provider.ITransformProvider2, global::Windows.UI.Xaml.Automation.Provider.ITransformProvider
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal MapControlAutomationPeer()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double HorizontalScrollPercent
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.HorizontalScrollPercent is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.HorizontalScrollPercent");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double HorizontalViewSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.HorizontalViewSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.HorizontalViewSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HorizontallyScrollable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.HorizontallyScrollable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.HorizontallyScrollable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double VerticalScrollPercent
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.VerticalScrollPercent is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.VerticalScrollPercent");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double VerticalViewSize
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.VerticalViewSize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.VerticalViewSize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool VerticallyScrollable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.VerticallyScrollable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.VerticallyScrollable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanMove
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.CanMove is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.CanMove");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanResize
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.CanResize is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.CanResize");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanRotate
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.CanRotate is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.CanRotate");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanZoom
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool MapControlAutomationPeer.CanZoom is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20MapControlAutomationPeer.CanZoom");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MaxZoom
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.MaxZoom is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.MaxZoom");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinZoom
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.MinZoom is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.MinZoom");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double ZoomLevel
		{
			get
			{
				throw new global::System.NotImplementedException("The member double MapControlAutomationPeer.ZoomLevel is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=double%20MapControlAutomationPeer.ZoomLevel");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.HorizontallyScrollable.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.HorizontalScrollPercent.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.HorizontalViewSize.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.VerticallyScrollable.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.VerticalScrollPercent.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.VerticalViewSize.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Scroll(global::Windows.UI.Xaml.Automation.ScrollAmount horizontalAmount, global::Windows.UI.Xaml.Automation.ScrollAmount verticalAmount)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.Scroll(ScrollAmount horizontalAmount, ScrollAmount verticalAmount)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetScrollPercent(double horizontalPercent, double verticalPercent)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.SetScrollPercent(double horizontalPercent, double verticalPercent)");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.CanZoom.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.ZoomLevel.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.MaxZoom.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.MinZoom.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Zoom(double zoom)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.Zoom(double zoom)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void ZoomByUnit(global::Windows.UI.Xaml.Automation.ZoomUnit zoomUnit)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.ZoomByUnit(ZoomUnit zoomUnit)");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.CanMove.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.CanResize.get
		// Forced skipping of method Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer.CanRotate.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Move(double x, double y)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.Move(double x, double y)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Resize(double width, double height)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.Resize(double width, double height)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Rotate(double degrees)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Automation.Peers.MapControlAutomationPeer", "void MapControlAutomationPeer.Rotate(double degrees)");
		}
#endif
		// Processing: Windows.UI.Xaml.Automation.Provider.IScrollProvider
		// Processing: Windows.UI.Xaml.Automation.Provider.ITransformProvider2
		// Processing: Windows.UI.Xaml.Automation.Provider.ITransformProvider
	}
}
