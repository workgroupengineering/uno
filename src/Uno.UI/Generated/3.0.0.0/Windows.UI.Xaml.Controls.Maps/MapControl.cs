// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml.Controls.Maps
{
	[global::Windows.UI.Xaml.Markup.ContentPropertyAttribute(Name = "Children")]
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class MapControl : global::Windows.UI.Xaml.Controls.Control
	{
		// Skipping already declared property ZoomLevel
		// Skipping already declared property WatermarkMode
		// Skipping already declared property TransformOrigin
		// Skipping already declared property TrafficFlowVisible
		// Skipping already declared property Style
		// Skipping already declared property PedestrianFeaturesVisible
		// Skipping already declared property MapServiceToken
		// Skipping already declared property Center
		// Skipping already declared property Heading
		// Skipping already declared property DesiredPitch
		// Skipping already declared property ColorScheme
		// Skipping already declared property LandmarksVisible
		// Skipping already declared property Children
		// Skipping already declared property LoadingStatus
		// Skipping already declared property MapElements
		// Skipping already declared property MaxZoomLevel
		// Skipping already declared property MinZoomLevel
		// Skipping already declared property Pitch
		// Skipping already declared property Routes
		// Skipping already declared property TileSources
		// Skipping already declared property RotateInteractionMode
		// Skipping already declared property ZoomInteractionMode
		// Skipping already declared property TransitFeaturesVisible
		// Skipping already declared property TiltInteractionMode
		// Skipping already declared property Scene
		// Skipping already declared property BusinessLandmarksVisible
		// Skipping already declared property PanInteractionMode
		// Skipping already declared property CustomExperience
		// Skipping already declared property ActualCamera
		// Skipping already declared property Is3DSupported
		// Skipping already declared property IsStreetsideSupported
		// Skipping already declared property TargetCamera
		// Skipping already declared property TransitFeaturesEnabled
		// Skipping already declared property BusinessLandmarksEnabled
		// Skipping already declared property ViewPadding
		// Skipping already declared property StyleSheet
		// Skipping already declared property MapProjection
		// Skipping already declared property Layers
		// Skipping already declared property Region
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanTiltDown
		{
			get
			{
				return (bool)this.GetValue(CanTiltDownProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanTiltUp
		{
			get
			{
				return (bool)this.GetValue(CanTiltUpProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanZoomIn
		{
			get
			{
				return (bool)this.GetValue(CanZoomInProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool CanZoomOut
		{
			get
			{
				return (bool)this.GetValue(CanZoomOutProperty);
			}
		}
#endif
		// Skipping already declared property CenterProperty
		// Skipping already declared property ZoomLevelProperty
		// Skipping already declared property ChildrenProperty
		// Skipping already declared property ColorSchemeProperty
		// Skipping already declared property DesiredPitchProperty
		// Skipping already declared property HeadingProperty
		// Skipping already declared property LandmarksVisibleProperty
		// Skipping already declared property LoadingStatusProperty
		// Skipping already declared property LocationProperty
		// Skipping already declared property MapElementsProperty
		// Skipping already declared property MapServiceTokenProperty
		// Skipping already declared property NormalizedAnchorPointProperty
		// Skipping already declared property PedestrianFeaturesVisibleProperty
		// Skipping already declared property PitchProperty
		// Skipping already declared property RoutesProperty
		// Skipping already declared property StyleProperty
		// Skipping already declared property TileSourcesProperty
		// Skipping already declared property TrafficFlowVisibleProperty
		// Skipping already declared property TransformOriginProperty
		// Skipping already declared property WatermarkModeProperty
		// Skipping already declared property BusinessLandmarksVisibleProperty
		// Skipping already declared property Is3DSupportedProperty
		// Skipping already declared property IsStreetsideSupportedProperty
		// Skipping already declared property PanInteractionModeProperty
		// Skipping already declared property RotateInteractionModeProperty
		// Skipping already declared property SceneProperty
		// Skipping already declared property TiltInteractionModeProperty
		// Skipping already declared property TransitFeaturesVisibleProperty
		// Skipping already declared property ZoomInteractionModeProperty
		// Skipping already declared property BusinessLandmarksEnabledProperty
		// Skipping already declared property TransitFeaturesEnabledProperty
		// Skipping already declared property MapProjectionProperty
		// Skipping already declared property StyleSheetProperty
		// Skipping already declared property ViewPaddingProperty
		// Skipping already declared property LayersProperty
		// Skipping already declared property RegionProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty CanTiltUpProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(CanTiltUp), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.Maps.MapControl),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty CanZoomInProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(CanZoomIn), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.Maps.MapControl),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty CanZoomOutProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(CanZoomOut), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.Maps.MapControl),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty CanTiltDownProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(CanTiltDown), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.Maps.MapControl),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.MapControl()
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapControl()
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Center.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Center.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Children.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ColorScheme.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ColorScheme.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.DesiredPitch.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.DesiredPitch.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Heading.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Heading.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LandmarksVisible.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LandmarksVisible.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatus.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapServiceToken.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapServiceToken.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MaxZoomLevel.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MinZoomLevel.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PedestrianFeaturesVisible.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PedestrianFeaturesVisible.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Pitch.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Style.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Style.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TrafficFlowVisible.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TrafficFlowVisible.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransformOrigin.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransformOrigin.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.WatermarkMode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.WatermarkMode.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevel.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevel.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElements.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Routes.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TileSources.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CenterChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CenterChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.HeadingChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.HeadingChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatusChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatusChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapDoubleTapped.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapDoubleTapped.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapHolding.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapHolding.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapTapped.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapTapped.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PitchChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PitchChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransformOriginChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransformOriginChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevelChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevelChanged.remove
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.FindMapElementsAtOffset(Windows.Foundation.Point)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetLocationFromOffset(Windows.Foundation.Point, out Windows.Devices.Geolocation.Geopoint)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetOffsetFromLocation(Windows.Devices.Geolocation.Geopoint, out Windows.Foundation.Point)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.IsLocationInView(Windows.Devices.Geolocation.Geopoint, out bool)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetViewBoundsAsync(Windows.Devices.Geolocation.GeoboundingBox, Windows.UI.Xaml.Thickness?, Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetViewAsync(Windows.Devices.Geolocation.Geopoint)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetViewAsync(Windows.Devices.Geolocation.Geopoint, double?)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetViewAsync(Windows.Devices.Geolocation.Geopoint, double?, double?, double?)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetViewAsync(Windows.Devices.Geolocation.Geopoint, double?, double?, double?, Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksVisible.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksVisible.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesVisible.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesVisible.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PanInteractionMode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PanInteractionMode.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.RotateInteractionMode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.RotateInteractionMode.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TiltInteractionMode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TiltInteractionMode.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomInteractionMode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomInteractionMode.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Is3DSupported.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.IsStreetsideSupported.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Scene.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Scene.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ActualCamera.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TargetCamera.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperience.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperience.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementClick.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementClick.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerEntered.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerEntered.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerExited.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerExited.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanging.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanging.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TargetCameraChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TargetCameraChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperienceChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperienceChanged.remove
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StartContinuousRotate(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StopContinuousRotate()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StartContinuousTilt(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StopContinuousTilt()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StartContinuousZoom(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StopContinuousZoom()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryRotateAsync(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryRotateToAsync(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryTiltAsync(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryTiltToAsync(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryZoomInAsync()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryZoomOutAsync()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryZoomToAsync(double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetSceneAsync(Windows.UI.Xaml.Controls.Maps.MapScene)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TrySetSceneAsync(Windows.UI.Xaml.Controls.Maps.MapScene, Windows.UI.Xaml.Controls.Maps.MapAnimationKind)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapRightTapped.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapRightTapped.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksEnabled.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksEnabled.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesEnabled.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesEnabled.set
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetVisibleRegion(Windows.UI.Xaml.Controls.Maps.MapVisibleRegionKind)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapProjection.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapProjection.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.StyleSheet.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.StyleSheet.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ViewPadding.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ViewPadding.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapContextRequested.add
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapContextRequested.remove
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.FindMapElementsAtOffset(Windows.Foundation.Point, double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetLocationFromOffset(Windows.Foundation.Point, Windows.Devices.Geolocation.AltitudeReferenceSystem, out Windows.Devices.Geolocation.Geopoint)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StartContinuousPan(double, double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.StopContinuousPan()
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryPanAsync(double, double)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryPanToAsync(Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Layers.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Layers.set
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryGetLocationFromOffset(Windows.Foundation.Point, out Windows.Devices.Geolocation.Geopoint)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.TryGetLocationFromOffset(Windows.Foundation.Point, Windows.Devices.Geolocation.AltitudeReferenceSystem, out Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Region.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Region.set
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanTiltDown.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanTiltUp.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanZoomIn.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanZoomOut.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanTiltDownProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanTiltUpProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanZoomInProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CanZoomOutProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.RegionProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LayersProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapProjectionProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.StyleSheetProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ViewPaddingProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksEnabledProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesEnabledProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.BusinessLandmarksVisibleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransitFeaturesVisibleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PanInteractionModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.RotateInteractionModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TiltInteractionModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomInteractionModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.Is3DSupportedProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.IsStreetsideSupportedProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.SceneProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.CenterProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ChildrenProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ColorSchemeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.DesiredPitchProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.HeadingProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LandmarksVisibleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatusProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapServiceTokenProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PedestrianFeaturesVisibleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.PitchProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.StyleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TrafficFlowVisibleProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TransformOriginProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.WatermarkModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevelProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.MapElementsProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.RoutesProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.TileSourcesProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.LocationProperty.get
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetLocation(Windows.UI.Xaml.DependencyObject)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.SetLocation(Windows.UI.Xaml.DependencyObject, Windows.Devices.Geolocation.Geopoint)
		// Forced skipping of method Windows.UI.Xaml.Controls.Maps.MapControl.NormalizedAnchorPointProperty.get
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.GetNormalizedAnchorPoint(Windows.UI.Xaml.DependencyObject)
		// Skipping already declared method Windows.UI.Xaml.Controls.Maps.MapControl.SetNormalizedAnchorPoint(Windows.UI.Xaml.DependencyObject, Windows.Foundation.Point)
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.CenterChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.HeadingChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.LoadingStatusChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapDoubleTapped
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapHolding
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapTapped
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.PitchChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.TransformOriginChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.ZoomLevelChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.ActualCameraChanging
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.CustomExperienceChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapElementClick
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerEntered
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapElementPointerExited
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.TargetCameraChanged
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapRightTapped
		// Skipping already declared event Windows.UI.Xaml.Controls.Maps.MapControl.MapContextRequested
	}
}
