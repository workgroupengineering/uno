// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class TriggerCollection : global::System.Collections.Generic.IList<global::Windows.UI.Xaml.TriggerBase>, global::System.Collections.Generic.IEnumerable<global::Windows.UI.Xaml.TriggerBase>
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal TriggerCollection()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public uint Size
		{
			get
			{
				throw new global::System.NotImplementedException("The member uint TriggerCollection.Size is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=uint%20TriggerCollection.Size");
			}
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.GetAt(uint)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.Size.get
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.GetView()
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.IndexOf(Windows.UI.Xaml.TriggerBase, out uint)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.SetAt(uint, Windows.UI.Xaml.TriggerBase)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.InsertAt(uint, Windows.UI.Xaml.TriggerBase)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.RemoveAt(uint)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.Append(Windows.UI.Xaml.TriggerBase)
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.RemoveAtEnd()
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.Clear()
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.GetMany(uint, Windows.UI.Xaml.TriggerBase[])
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.ReplaceAll(Windows.UI.Xaml.TriggerBase[])
		// Forced skipping of method Windows.UI.Xaml.TriggerCollection.First()
		// Processing: System.Collections.Generic.IList<Windows.UI.Xaml.TriggerBase>
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.IList<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int IndexOf(global::Windows.UI.Xaml.TriggerBase item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.IList<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Insert(int index, global::Windows.UI.Xaml.TriggerBase item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.IList<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void RemoveAt(int index)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.TriggerBase this[int index]
		{
			get
			{
				throw new global::System.NotSupportedException();
			}
			set
			{
				throw new global::System.NotSupportedException();
			}
		}
#endif
		// Processing: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Add(global::Windows.UI.Xaml.TriggerBase item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Clear()
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Contains(global::Windows.UI.Xaml.TriggerBase item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void CopyTo(global::Windows.UI.Xaml.TriggerBase[] array, int arrayIndex)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.ICollection<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool Remove(global::Windows.UI.Xaml.TriggerBase item)
		{
			throw new global::System.NotSupportedException();
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public int Count
		{
			get
			{
				throw new global::System.NotSupportedException();
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsReadOnly
		{
			get
			{
				throw new global::System.NotSupportedException();
			}
		}
#endif
		// Processing: System.Collections.Generic.IEnumerable<Windows.UI.Xaml.TriggerBase>
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.Generic.IEnumerable<Windows.UI.Xaml.TriggerBase>
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IEnumerator<global::Windows.UI.Xaml.TriggerBase> GetEnumerator()
		{
			throw new global::System.NotSupportedException();
		}
#endif
		// Processing: System.Collections.IEnumerable
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		// DeclaringType: System.Collections.IEnumerable
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		 global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
		{
			throw new global::System.NotSupportedException();
		}
#endif
	}
}
