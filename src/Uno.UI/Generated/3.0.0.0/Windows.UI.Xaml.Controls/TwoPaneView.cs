// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml.Controls
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class TwoPaneView : global::Windows.UI.Xaml.Controls.Control
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration WideModeConfiguration
		{
			get
			{
				return (global::Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration)this.GetValue(WideModeConfigurationProperty);
			}
			set
			{
				this.SetValue(WideModeConfigurationProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration TallModeConfiguration
		{
			get
			{
				return (global::Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration)this.GetValue(TallModeConfigurationProperty);
			}
			set
			{
				this.SetValue(TallModeConfigurationProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.Controls.TwoPaneViewPriority PanePriority
		{
			get
			{
				return (global::Windows.UI.Xaml.Controls.TwoPaneViewPriority)this.GetValue(PanePriorityProperty);
			}
			set
			{
				this.SetValue(PanePriorityProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.GridLength Pane2Length
		{
			get
			{
				return (global::Windows.UI.Xaml.GridLength)this.GetValue(Pane2LengthProperty);
			}
			set
			{
				this.SetValue(Pane2LengthProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.UIElement Pane2
		{
			get
			{
				return (global::Windows.UI.Xaml.UIElement)this.GetValue(Pane2Property);
			}
			set
			{
				this.SetValue(Pane2Property, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.GridLength Pane1Length
		{
			get
			{
				return (global::Windows.UI.Xaml.GridLength)this.GetValue(Pane1LengthProperty);
			}
			set
			{
				this.SetValue(Pane1LengthProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.UIElement Pane1
		{
			get
			{
				return (global::Windows.UI.Xaml.UIElement)this.GetValue(Pane1Property);
			}
			set
			{
				this.SetValue(Pane1Property, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinWideModeWidth
		{
			get
			{
				return (double)this.GetValue(MinWideModeWidthProperty);
			}
			set
			{
				this.SetValue(MinWideModeWidthProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public double MinTallModeHeight
		{
			get
			{
				return (double)this.GetValue(MinTallModeHeightProperty);
			}
			set
			{
				this.SetValue(MinTallModeHeightProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.Controls.TwoPaneViewMode Mode
		{
			get
			{
				return (global::Windows.UI.Xaml.Controls.TwoPaneViewMode)this.GetValue(ModeProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty MinTallModeHeightProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(MinTallModeHeight), typeof(double),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty MinWideModeWidthProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(MinWideModeWidth), typeof(double),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(double)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty ModeProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(Mode), typeof(global::Windows.UI.Xaml.Controls.TwoPaneViewMode),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.Controls.TwoPaneViewMode)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty Pane1LengthProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(Pane1Length), typeof(global::Windows.UI.Xaml.GridLength),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.GridLength)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty Pane1Property { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(Pane1), typeof(global::Windows.UI.Xaml.UIElement),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.UIElement)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty Pane2LengthProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(Pane2Length), typeof(global::Windows.UI.Xaml.GridLength),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.GridLength)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty Pane2Property { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(Pane2), typeof(global::Windows.UI.Xaml.UIElement),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.UIElement)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty PanePriorityProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(PanePriority), typeof(global::Windows.UI.Xaml.Controls.TwoPaneViewPriority),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.Controls.TwoPaneViewPriority)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty TallModeConfigurationProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(TallModeConfiguration), typeof(global::Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty WideModeConfigurationProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(WideModeConfiguration), typeof(global::Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration),
			typeof(global::Windows.UI.Xaml.Controls.TwoPaneView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration)));
#endif
		// Skipping already declared method Windows.UI.Xaml.Controls.TwoPaneView.TwoPaneView()
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.TwoPaneView()
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1Length.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1Length.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2Length.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2Length.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.PanePriority.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.PanePriority.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Mode.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.WideModeConfiguration.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.WideModeConfiguration.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.TallModeConfiguration.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.TallModeConfiguration.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinWideModeWidth.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinWideModeWidth.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinTallModeHeight.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinTallModeHeight.set
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.ModeChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.ModeChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1Property.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2Property.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane1LengthProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.Pane2LengthProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.PanePriorityProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.ModeProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.WideModeConfigurationProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.TallModeConfigurationProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinWideModeWidthProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.TwoPaneView.MinTallModeHeightProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.TwoPaneView, object> ModeChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.TwoPaneView", "event TypedEventHandler<TwoPaneView, object> TwoPaneView.ModeChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.TwoPaneView", "event TypedEventHandler<TwoPaneView, object> TwoPaneView.ModeChanged");
			}
		}
#endif
	}
}
