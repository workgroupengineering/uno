// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Windows.UI.Xaml.Controls
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class HandwritingView : global::Windows.UI.Xaml.Controls.Control
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.UIElement PlacementTarget
		{
			get
			{
				return (global::Windows.UI.Xaml.UIElement)this.GetValue(PlacementTargetProperty);
			}
			set
			{
				this.SetValue(PlacementTargetProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment PlacementAlignment
		{
			get
			{
				return (global::Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment)this.GetValue(PlacementAlignmentProperty);
			}
			set
			{
				this.SetValue(PlacementAlignmentProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool AreCandidatesEnabled
		{
			get
			{
				return (bool)this.GetValue(AreCandidatesEnabledProperty);
			}
			set
			{
				this.SetValue(AreCandidatesEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsOpen
		{
			get
			{
				return (bool)this.GetValue(IsOpenProperty);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsSwitchToKeyboardEnabled
		{
			get
			{
				return (bool)this.GetValue(IsSwitchToKeyboardEnabledProperty);
			}
			set
			{
				this.SetValue(IsSwitchToKeyboardEnabledProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsCommandBarOpen
		{
			get
			{
				return (bool)this.GetValue(IsCommandBarOpenProperty);
			}
			set
			{
				this.SetValue(IsCommandBarOpenProperty, value);
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Windows.UI.Core.CoreInputDeviceTypes InputDeviceTypes
		{
			get
			{
				throw new global::System.NotImplementedException("The member CoreInputDeviceTypes HandwritingView.InputDeviceTypes is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=CoreInputDeviceTypes%20HandwritingView.InputDeviceTypes");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "CoreInputDeviceTypes HandwritingView.InputDeviceTypes");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty AreCandidatesEnabledProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(AreCandidatesEnabled), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty IsOpenProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(IsOpen), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty PlacementAlignmentProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(PlacementAlignment), typeof(global::Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.Controls.HandwritingPanelPlacementAlignment)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty PlacementTargetProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(PlacementTarget), typeof(global::Windows.UI.Xaml.UIElement),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(global::Windows.UI.Xaml.UIElement)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty IsCommandBarOpenProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(IsCommandBarOpen), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Windows.UI.Xaml.DependencyProperty IsSwitchToKeyboardEnabledProperty { get; } =
		Windows.UI.Xaml.DependencyProperty.Register(
			nameof(IsSwitchToKeyboardEnabled), typeof(bool),
			typeof(global::Windows.UI.Xaml.Controls.HandwritingView),
			new Windows.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public HandwritingView() : base()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "HandwritingView.HandwritingView()");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.HandwritingView()
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementTarget.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementTarget.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementAlignment.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementAlignment.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsOpen.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.AreCandidatesEnabled.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.AreCandidatesEnabled.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.Opened.add
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.Opened.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.Closed.add
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.Closed.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool TryClose()
		{
			throw new global::System.NotImplementedException("The member bool HandwritingView.TryClose() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HandwritingView.TryClose%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool TryOpen()
		{
			throw new global::System.NotImplementedException("The member bool HandwritingView.TryOpen() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20HandwritingView.TryOpen%28%29");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsSwitchToKeyboardEnabled.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsSwitchToKeyboardEnabled.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsCommandBarOpen.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsCommandBarOpen.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.InputDeviceTypes.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.InputDeviceTypes.set
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.CandidatesChanged.add
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.CandidatesChanged.remove
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.TextSubmitted.add
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.TextSubmitted.remove
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::System.Collections.Generic.IReadOnlyList<string> GetCandidates(uint candidatesSessionId)
		{
			throw new global::System.NotImplementedException("The member IReadOnlyList<string> HandwritingView.GetCandidates(uint candidatesSessionId) is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=IReadOnlyList%3Cstring%3E%20HandwritingView.GetCandidates%28uint%20candidatesSessionId%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SelectCandidate(uint candidatesSessionId, uint selectedCandidateIndex)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "void HandwritingView.SelectCandidate(uint candidatesSessionId, uint selectedCandidateIndex)");
		}
#endif
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsSwitchToKeyboardEnabledProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsCommandBarOpenProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementTargetProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.PlacementAlignmentProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.IsOpenProperty.get
		// Forced skipping of method Windows.UI.Xaml.Controls.HandwritingView.AreCandidatesEnabledProperty.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingPanelClosedEventArgs> Closed
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingPanelClosedEventArgs> HandwritingView.Closed");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingPanelClosedEventArgs> HandwritingView.Closed");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingPanelOpenedEventArgs> Opened
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingPanelOpenedEventArgs> HandwritingView.Opened");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingPanelOpenedEventArgs> HandwritingView.Opened");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingViewCandidatesChangedEventArgs> CandidatesChanged
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingViewCandidatesChangedEventArgs> HandwritingView.CandidatesChanged");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingViewCandidatesChangedEventArgs> HandwritingView.CandidatesChanged");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public event global::Windows.Foundation.TypedEventHandler<global::Windows.UI.Xaml.Controls.HandwritingView, global::Windows.UI.Xaml.Controls.HandwritingViewTextSubmittedEventArgs> TextSubmitted
		{
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			add
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingViewTextSubmittedEventArgs> HandwritingView.TextSubmitted");
			}
			[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
			remove
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Windows.UI.Xaml.Controls.HandwritingView", "event TypedEventHandler<HandwritingView, HandwritingViewTextSubmittedEventArgs> HandwritingView.TextSubmitted");
			}
		}
#endif
	}
}
