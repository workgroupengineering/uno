// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Xaml.Controls.Primitives
{
#if false || false || false || false || false || false || false
	[global::Uno.NotImplemented]
#endif
	public partial class Popup : global::Microsoft.UI.Xaml.FrameworkElement
	{
		// Skipping already declared property VerticalOffset
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool ShouldConstrainToRootBounds
		{
			get
			{
				return (bool)this.GetValue(ShouldConstrainToRootBoundsProperty);
			}
			set
			{
				this.SetValue(ShouldConstrainToRootBoundsProperty, value);
			}
		}
#endif
		// Skipping already declared property LightDismissOverlayMode
		// Skipping already declared property IsOpen
		// Skipping already declared property IsLightDismissEnabled
		// Skipping already declared property HorizontalOffset
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection ChildTransitions
		{
			get
			{
				return (global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection)this.GetValue(ChildTransitionsProperty);
			}
			set
			{
				this.SetValue(ChildTransitionsProperty, value);
			}
		}
#endif
		// Skipping already declared property Child
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsConstrainedToRootBounds
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool Popup.IsConstrainedToRootBounds is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20Popup.IsConstrainedToRootBounds");
			}
		}
#endif
		// Skipping already declared property PlacementTarget
		// Skipping already declared property DesiredPlacement
		// Skipping already declared property ActualPlacement
		// Skipping already declared property ChildProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ChildTransitionsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(ChildTransitions), typeof(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection),
			typeof(global::Microsoft.UI.Xaml.Controls.Primitives.Popup),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(global::Microsoft.UI.Xaml.Media.Animation.TransitionCollection)));
#endif
		// Skipping already declared property HorizontalOffsetProperty
		// Skipping already declared property IsLightDismissEnabledProperty
		// Skipping already declared property IsOpenProperty
		// Skipping already declared property LightDismissOverlayModeProperty
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Xaml.DependencyProperty ShouldConstrainToRootBoundsProperty { get; } =
		Microsoft.UI.Xaml.DependencyProperty.Register(
			nameof(ShouldConstrainToRootBounds), typeof(bool),
			typeof(global::Microsoft.UI.Xaml.Controls.Primitives.Popup),
			new Microsoft.UI.Xaml.FrameworkPropertyMetadata(default(bool)));
#endif
		// Skipping already declared property VerticalOffsetProperty
		// Skipping already declared property DesiredPlacementProperty
		// Skipping already declared property PlacementTargetProperty
		// Skipping already declared method Microsoft.UI.Xaml.Controls.Primitives.Popup.Popup()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Popup()
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Child.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Child.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsOpen.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsOpen.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.HorizontalOffset.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.HorizontalOffset.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.VerticalOffset.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.VerticalOffset.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ChildTransitions.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ChildTransitions.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsLightDismissEnabled.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsLightDismissEnabled.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.LightDismissOverlayMode.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.LightDismissOverlayMode.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBounds.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBounds.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsConstrainedToRootBounds.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Opened.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Opened.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Closed.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.Closed.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.PlacementTarget.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.PlacementTarget.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.DesiredPlacement.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.DesiredPlacement.set
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ActualPlacement.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ActualPlacementChanged.add
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ActualPlacementChanged.remove
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.PlacementTargetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.DesiredPlacementProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ChildProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsOpenProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.HorizontalOffsetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.VerticalOffsetProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ChildTransitionsProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.IsLightDismissEnabledProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.LightDismissOverlayModeProperty.get
		// Forced skipping of method Microsoft.UI.Xaml.Controls.Primitives.Popup.ShouldConstrainToRootBoundsProperty.get
		// Skipping already declared event Microsoft.UI.Xaml.Controls.Primitives.Popup.Closed
		// Skipping already declared event Microsoft.UI.Xaml.Controls.Primitives.Popup.Opened
		// Skipping already declared event Microsoft.UI.Xaml.Controls.Primitives.Popup.ActualPlacementChanged
	}
}
