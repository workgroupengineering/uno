// <auto-generated>
#pragma warning disable 108 // new keyword hiding
#pragma warning disable 114 // new keyword hiding
namespace Microsoft.UI.Windowing
{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
	[global::Uno.NotImplemented]
#endif
	public partial class OverlappedPresenter : global::Microsoft.UI.Windowing.AppWindowPresenter
	{
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		internal OverlappedPresenter()
		{
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsResizable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.IsResizable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.IsResizable");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "bool OverlappedPresenter.IsResizable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsModal
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.IsModal is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.IsModal");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "bool OverlappedPresenter.IsModal");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsMinimizable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.IsMinimizable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.IsMinimizable");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "bool OverlappedPresenter.IsMinimizable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsMaximizable
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.IsMaximizable is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.IsMaximizable");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "bool OverlappedPresenter.IsMaximizable");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool IsAlwaysOnTop
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.IsAlwaysOnTop is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.IsAlwaysOnTop");
			}
			set
			{
				global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "bool OverlappedPresenter.IsAlwaysOnTop");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasBorder
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.HasBorder is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.HasBorder");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public bool HasTitleBar
		{
			get
			{
				throw new global::System.NotImplementedException("The member bool OverlappedPresenter.HasTitleBar is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=bool%20OverlappedPresenter.HasTitleBar");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public global::Microsoft.UI.Windowing.OverlappedPresenterState State
		{
			get
			{
				throw new global::System.NotImplementedException("The member OverlappedPresenterState OverlappedPresenter.State is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenterState%20OverlappedPresenter.State");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Windowing.OverlappedPresenterState RequestedStartupState
		{
			get
			{
				throw new global::System.NotImplementedException("The member OverlappedPresenterState OverlappedPresenter.RequestedStartupState is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenterState%20OverlappedPresenter.RequestedStartupState");
			}
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Restore()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.Restore()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.HasTitleBar.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsAlwaysOnTop.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsAlwaysOnTop.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMaximizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMaximizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMinimizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsMinimizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsModal.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsModal.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsResizable.get
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.IsResizable.set
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.State.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Maximize()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.Maximize()");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Minimize()
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.Minimize()");
		}
#endif
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.HasBorder.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.SetBorderAndTitleBar(bool hasBorder, bool hasTitleBar)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Minimize(bool activateWindow)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.Minimize(bool activateWindow)");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public void Restore(bool activateWindow)
		{
			global::Windows.Foundation.Metadata.ApiInformation.TryRaiseNotImplemented("Microsoft.UI.Windowing.OverlappedPresenter", "void OverlappedPresenter.Restore(bool activateWindow)");
		}
#endif
		// Forced skipping of method Microsoft.UI.Windowing.OverlappedPresenter.RequestedStartupState.get
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Windowing.OverlappedPresenter Create()
		{
			throw new global::System.NotImplementedException("The member OverlappedPresenter OverlappedPresenter.Create() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenter%20OverlappedPresenter.Create%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Windowing.OverlappedPresenter CreateForContextMenu()
		{
			throw new global::System.NotImplementedException("The member OverlappedPresenter OverlappedPresenter.CreateForContextMenu() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenter%20OverlappedPresenter.CreateForContextMenu%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Windowing.OverlappedPresenter CreateForDialog()
		{
			throw new global::System.NotImplementedException("The member OverlappedPresenter OverlappedPresenter.CreateForDialog() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenter%20OverlappedPresenter.CreateForDialog%28%29");
		}
#endif
#if __ANDROID__ || __IOS__ || IS_UNIT_TESTS || __WASM__ || __SKIA__ || __NETSTD_REFERENCE__ || __MACOS__
		[global::Uno.NotImplemented("__ANDROID__", "__IOS__", "IS_UNIT_TESTS", "__WASM__", "__SKIA__", "__NETSTD_REFERENCE__", "__MACOS__")]
		public static global::Microsoft.UI.Windowing.OverlappedPresenter CreateForToolWindow()
		{
			throw new global::System.NotImplementedException("The member OverlappedPresenter OverlappedPresenter.CreateForToolWindow() is not implemented. For more information, visit https://aka.platform.uno/notimplemented#m=OverlappedPresenter%20OverlappedPresenter.CreateForToolWindow%28%29");
		}
#endif
	}
}
