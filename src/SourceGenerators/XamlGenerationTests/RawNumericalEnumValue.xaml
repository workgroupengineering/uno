<UserControl x:Class="XamlGenerationTests.Shared.RawNumericalEnumValue"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:void="Reach into the Void and claim your prize."
			 xmlns:local="using:XamlGenerationTests.Shared"
			 mc:Ignorable="d void">
	
	<StackPanel>
		<!-- fyi 'void:' is used to comment out code -->

		<!-- Raw numerical enum values are valid -->
		<StackPanel Orientation="0" />
		<StackPanel Orientation="1" />

		<!-- Assigning undefined value for StackPanel::Orientation will cause runtime exception on Uwp: -->
		<!-- XamlParseException: Failed to create a 'Microsoft.UI.Xaml.Controls.Orientation' from the text '2'. -->
		<!-- Yet, if nothing will happens if you do the same in the code behind... -->
		<void:StackPanel Orientation="2" />

		<!-- However, it is perfectly fine on this example below: -->
		<local:RawNumericalEnumValueTest SomeEnumProperty="312" />

		<!-- Negative numbers are usually fine, EXCEPT for unsigned enum -->
		<local:RawNumericalEnumValueTest SomeEnumProperty="-312" />
		<void:RawNumericalEnumValueTest SomeUnsignedEnumProperty="-312" />

		<!-- As with string literal enum, having leading or trailing space are fine -->
		<StackPanel Orientation="   0" />
		<StackPanel Orientation="0   " />
		<StackPanel Orientation="   0   " />
		
		<!-- space or digit sperator are illegal however -->
		<void:RawNumericalEnumValueTest SomeEnumProperty="3 1 2" />
		<void:RawNumericalEnumValueTest SomeEnumProperty="3_1_2" />

		<!-- multiple flag numbers with are fine too, even for unknown ones or without [Flags] on the enum type -->
		<local:RawNumericalEnumValueTest SomeFlagEnumProperty="3,12" />
		<local:RawNumericalEnumValueTest SomeEnumProperty="3,12" />
	</StackPanel>

</UserControl>
